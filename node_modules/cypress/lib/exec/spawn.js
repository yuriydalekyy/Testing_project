'use strict';

var _ = require('lodash');
var os = require('os');
var cp = require('child_process');
var Promise = require('bluebird');
var devNull = require('dev-null');
var debug = require('debug')('cypress:cli');

var info = require('../tasks/info');
var xvfb = require('./xvfb');

var _require = require('../errors'),
    throwFormErrorText = _require.throwFormErrorText,
    errors = _require.errors;

function getStdio() {
  // https://github.com/cypress-io/cypress/issues/717
  // need to switch this else windows crashes
  if (os.platform() === 'win32') {
    return ['inherit', 'pipe', 'pipe'];
  }

  return ['inherit', 'inherit', 'ignore'];
}

module.exports = {
  start: function start(args) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    args = [].concat(args);

    _.defaults(options, {
      detached: false,
      stdio: getStdio()
    });

    var spawn = function spawn() {
      return new Promise(function (resolve, reject) {
        var cypressPath = info.getPathToExecutable();
        debug('spawning Cypress %s', cypressPath);
        debug('spawn args %j', args);

        var child = cp.spawn(cypressPath, args, options);
        child.on('close', resolve);
        child.on('error', reject);

        // if these are defined then we manually pipe for windows
        child.stdout && child.stdout.pipe(process.stdout);
        child.stderr && child.stderr.pipe(devNull());

        if (options.detached) {
          child.unref();
        }
      });
    };

    var userFriendlySpawn = function userFriendlySpawn() {
      return spawn().catch(throwFormErrorText(errors.unexpected));
    };

    var needsXvfb = xvfb.isNeeded();
    debug('needs XVFB?', needsXvfb);

    if (needsXvfb) {
      return xvfb.start().then(userFriendlySpawn).finally(xvfb.stop);
    } else {
      return userFriendlySpawn();
    }
  }
};