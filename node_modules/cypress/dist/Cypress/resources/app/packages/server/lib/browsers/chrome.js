(function() {
  var Promise, appData, defaultArgs, extension, fs, log, pathToExtension, pathToTheme, utils;

  fs = require("fs-extra");

  Promise = require("bluebird");

  extension = require("@packages/extension");

  log = require("debug")("cypress:server:browsers");

  appData = require("../util/app_data");

  utils = require("./utils");

  fs = Promise.promisifyAll(fs);

  pathToExtension = extension.getPathToExtension();

  pathToTheme = extension.getPathToTheme();

  defaultArgs = ["--test-type", "--ignore-certificate-errors", "--start-maximized", "--silent-debugger-extension-api", "--no-default-browser-check", "--no-first-run", "--noerrdialogs", "--enable-fixed-layout", "--disable-popup-blocking", "--disable-password-generation", "--disable-save-password-bubble", "--disable-single-click-autofill", "--disable-prompt-on-repos", "--disable-background-timer-throttling", "--disable-renderer-backgrounding", "--disable-renderer-throttling", "--disable-restore-session-state", "--disable-translate", "--disable-new-profile-management", "--disable-new-avatar-menu", "--allow-insecure-localhost", "--reduce-security-for-testing", "--enable-automation", "--disable-infobars", "--disable-blink-features=BlockCredentialedSubresources", "--metrics-recording-only", "--disable-prompt-on-repost", "--disable-hang-monitor", "--disable-sync", "--disable-background-networking", "--disable-web-resources", "--safebrowsing-disable-auto-update", "--safebrowsing-disable-download-protection", "--disable-client-side-phishing-detection", "--disable-component-update", "--disable-default-apps"];

  module.exports = {
    _writeExtension: function(proxyUrl, socketIoRoute) {
      return extension.setHostAndPath(proxyUrl, socketIoRoute).then(function(str) {
        var extensionBg, extensionDest;
        extensionDest = appData.path("extensions", "chrome");
        extensionBg = appData.path("extensions", "chrome", "background.js");
        return utils.copyExtension(pathToExtension, extensionDest).then(function() {
          return fs.writeFileAsync(extensionBg, str);
        })["return"](extensionDest);
      });
    },
    open: function(browserName, url, options, automation) {
      var args;
      if (options == null) {
        options = {};
      }
      args = defaultArgs.concat(options.browserArgs);
      return Promise.all([utils.ensureProfile(browserName), this._writeExtension(options.proxyUrl, options.socketIoRoute)]).spread(function(dir, dest) {
        var ps;
        args.push("--load-extension=" + dest + "," + pathToTheme);
        args.push("--user-data-dir=" + dir);
        if (ps = options.proxyServer) {
          args.push("--proxy-server=" + ps);
        }
        if (options.chromeWebSecurity === false) {
          args.push("--disable-web-security");
          args.push("--allow-running-insecure-content");
        }
        log("launch in chrome: %s, %s", url, args);
        return utils.launch(browserName, url, args);
      });
    }
  };

}).call(this);
